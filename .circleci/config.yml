version: 2.1

parameters:
  dev-stage-branch:
    type: string
    default: "develop"
  main-stage-branch:
    type: string
    default: "main"

commands:
  setup-aws-credentials-from-env:
    steps:
      - run:
          command: |
            if [ $CIRCLE_BRANCH == "<< pipeline.parameters.dev-stage-branch >>" ]; then
              echo "export AWS_ACCESS_KEY_ID='${DEV_AWS_ACCESS_KEY_ID}'" >> "$BASH_ENV"
              echo "export AWS_SECRET_ACCESS_KEY='${DEV_AWS_SECRET_ACCESS_KEY}'" >> "$BASH_ENV"
            else
              echo "export AWS_ACCESS_KEY_ID='${PROD_AWS_ACCESS_KEY_ID}'" >> "$BASH_ENV"
              echo "export AWS_SECRET_ACCESS_KEY='${PROD_AWS_SECRET_ACCESS_KEY}'" >> "$BASH_ENV"
            fi
            source "$BASH_ENV"

orbs:
  maven: circleci/maven@1.4.1
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.5
  gh: circleci/github-cli@2.2.0

jobs:
  build_test_backend:
    docker:
      - image: cimg/openjdk:17.0.3
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: runningdinner
    steps:
      - checkout
#      - restore_cache:
#          keys:
#            - dependencies-{{ checksum "runningdinner-backend/pom.xml" }} # appends cache key with a hash of pom.xml file
#            - dependencies- # fallback in case previous cache key is not found
      - attach_workspace:
          at: runningdinner-backend/src/main/resources
      - run:
          name: Setup application-prod.properties # Not very nice, but sufficient for now
          command: |
            STAGE_SUBDOMAIN=""
            if [ $CIRCLE_BRANCH == "<< pipeline.parameters.dev-stage-branch >>" ]; then
              STAGE_SUBDOMAIN="dev."
            fi
            echo "sendgrid.api.key=${PROD_SENDGRID_API_KEY}" >> runningdinner-backend/src/main/resources/application-prod.properties
            echo "host.context.url=https://${STAGE_SUBDOMAIN}runyourdinner.eu" >> runningdinner-backend/src/main/resources/application-prod.properties
            echo "server.port=80" >> runningdinner-backend/src/main/resources/application-prod.properties
      - run:
          name: Build + Test
          command: |
            cd runningdinner-backend
            ./mvnw package
            java -Djarmode=layertools -jar target/*.jar extract --destination target/extracted/
#      - save_cache:
#          paths:
#            - ~/.m2
#          key: dependencies-{{ checksum "runningdinner-backend/pom.xml" }}
      - maven/process_test_results:
          test_results_path: runningdinner-backend/target/surefire-reports
      - run: cd runningdinner-backend/target && tar -cvzf runningdinner.tar.gz runningdinner-2.0.0.jar && cd -
      - store_artifacts:
          path: runningdinner-backend/target/runningdinner.tar.gz
      - persist_to_workspace:
          root: runningdinner-backend/target
          paths:
            - runningdinner.tar.gz
            - extracted

  build_docker_image:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: runningdinner-backend/target
      - run:
          name: Build Docker Image
          command: |
            cd runningdinner-backend
            if [ $CIRCLE_BRANCH == "<< pipeline.parameters.main-stage-branch >>" ]; then
              docker build -f infrastructure/deployment/docker/Dockerfile -t clemensstich/runningdinner:latest -t clemensstich/runningdinner:$CIRCLE_SHA1 .
            else
              docker build -f infrastructure/deployment/docker/Dockerfile -t clemensstich/runningdinner:$CIRCLE_SHA1 .
            fi
      - run:
          name: Push to Dockerhub
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            docker push --all-tags clemensstich/runningdinner

  build_webclient:
    docker:
      - image: node:18
    steps:
      - checkout
      - restore_cache:
          keys:
            - pnpm-packages-{{ checksum "runningdinner-client/pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            corepack enable
            corepack prepare pnpm@latest-8 --activate

      - run: cd runningdinner-client && pnpm install
      - run: # TODO CI=false should be removed again!
          name: Build webclient
          command: |
            export GOOGLE_MAPS_KEY_JS=$GOOGLE_MAPS_KEY_JS
            cd runningdinner-client/webapp
            CI=false pnpm build
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "runningdinner-client/pnpm-lock.yaml" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: runningdinner-client/webapp
          paths:
            - dist

  deploy_webclient_s3:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - setup-aws-credentials-from-env
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - attach_workspace:
          at: webapp-build
      - run:
          name: Execute aws s3 sync
          command: |
            CONTENT_BUILD_DIR="webapp-build/dist"
            if [ ! -d "$CONTENT_BUILD_DIR" ] || [ ! "$(ls -A $CONTENT_BUILD_DIR)" ]; then
              echo "$CONTENT_BUILD_DIR does either not exist or has no files inside"
              exit 1
            fi

            STAGE="prod"
            if [ $CIRCLE_BRANCH == "<< pipeline.parameters.dev-stage-branch >>" ]; then
              STAGE="dev"
            fi
            aws s3 sync "$CONTENT_BUILD_DIR/" "s3://runningdinner-web-${STAGE}" --delete --region eu-central-1
      - run:
          name: Cloudfront invalidation
          command: |
            distributions=$(aws cloudfront list-distributions --query 'DistributionList.Items[*].{Id:Id}' --output text)
            # Check if there is only one distribution
            if [ $(echo "$distributions" | wc -l) -ne 1 ]; then
              echo "Error: There are either no CloudFront distributions or multiple distributions in the account." >&2
              exit 1
            fi

            # Get the distribution ID
            distribution_id=$(echo "$distributions" | awk '{print $1}')
            echo "Invalidating $distribution_id"
            aws cloudfront create-invalidation --distribution-id $distribution_id --paths "/*"

  deploy_backend_ecs:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - setup-aws-credentials-from-env
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-ecs/update-service:
          cluster: "runningdinner-ecs-cluster"
          family: "runningdinner-backend"
          service-name: "runningdinner-service"
          container-image-name-updates: 'container=runningdinner-backend,tag=${CIRCLE_SHA1}'

  check_backend_health:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - run:
          name: Check Backend REST service can be reached
          command: |
            STAGE_SUBDOMAIN=""
            if [ $CIRCLE_BRANCH == "<< pipeline.parameters.dev-stage-branch >>" ]; then
              STAGE_SUBDOMAIN="dev."
            fi
            curl -k -XGET "https://${STAGE_SUBDOMAIN}runyourdinner.eu/rest/masterdataservice/v1/registrationtypes"

  verify_backend_deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - setup-aws-credentials-from-env
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition runningdinner-backend \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          cluster: "runningdinner-ecs-cluster"
          family: "runningdinner-backend"
          service-name: "runningdinner-service"
          task-definition-arn: '${TASK_DEFINITION_ARN}'

  create_release_and_git_tag:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - gh/setup
      - run:
          name: Create Github Release and Tag
          command: |
            currentDate=$(date +'%Y-%m-%d_%H-%M')
            gh release create "Release_$currentDate" --target $CIRCLE_BRANCH

workflows:
  build_test_deploy_app:
    jobs:
      - build_webclient:
          context: workspace
      - build_test_backend:
          context: workspace
      - build_docker_image:
          context: workspace
          requires:
            - build_test_backend
          filters:
            branches:
              only: 
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>
      - confirm-app-deployment:
          type: approval
          filters:
            branches:
              only:
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>
      - deploy_backend_ecs:
          context: workspace
          requires:
            - build_docker_image
            - build_webclient
            - confirm-app-deployment
          filters:
            branches:
              only:
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>
      - check_backend_health:
          requires:
            - deploy_backend_ecs
          filters:
            branches:
              only:
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>
      - verify_backend_deployment:
          context: workspace
          requires:
            - deploy_backend_ecs
          filters:
            branches:
              only:
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>
      - deploy_webclient_s3:
          context: workspace
          requires:
            - build_webclient
            - confirm-app-deployment
            - deploy_backend_ecs
            - check_backend_health
            - verify_backend_deployment
          filters:
            branches:
              only:
                - << pipeline.parameters.dev-stage-branch >>
                - << pipeline.parameters.main-stage-branch >>

      - create_release_and_git_tag:
          context: workspace
          requires:
            - build_webclient
            - confirm-app-deployment
            - deploy_backend_ecs
            - check_backend_health
            - verify_backend_deployment
          filters:
            branches:
              only:
                - << pipeline.parameters.main-stage-branch >>