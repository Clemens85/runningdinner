version: 2.1

orbs:
  maven: circleci/maven@1.0.3
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.5

jobs:
  build_test_backend:
    docker:
      - image: cimg/openjdk:17.0.3
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: runningdinner
    steps:
      - checkout
#      - restore_cache:
#          keys:
#            - dependencies-{{ checksum "runningdinner-backend/pom.xml" }} # appends cache key with a hash of pom.xml file
#            - dependencies- # fallback in case previous cache key is not found
      - attach_workspace:
          at: runningdinner-backend/src/main/resources
      - run:
          name: Setup application-prod.properties # Not very nice, but sufficient for now
          command: |
            echo "sendgrid.api.key=${PROD_SENDGRID_API_KEY}" >> runningdinner-backend/src/main/resources/application-prod.properties
            echo 'host.context.url=https://runyourdinner.eu' >> runningdinner-backend/src/main/resources/application-prod.properties
            echo "server.port=80" >> runningdinner-backend/src/main/resources/application-prod.properties
      - run:
          name: Build + Test
          command: |
            cd runningdinner-backend
            ./mvnw package
            java -Djarmode=layertools -jar target/*.jar extract --destination target/extracted/
#      - save_cache:
#          paths:
#            - ~/.m2
#          key: dependencies-{{ checksum "runningdinner-backend/pom.xml" }}
      - run: cp runningdinner-backend/infrastructure/deployment/deploy.sh runningdinner-backend/target/deploy.sh
      - maven/process_test_results:
          test_results_path: runningdinner-backend/target/surefire-reports
      - run: cd runningdinner-backend/target && tar -cvzf runningdinner.tar.gz runningdinner-2.0.0.jar && cd -
      - store_artifacts:
          path: runningdinner-backend/target/runningdinner.tar.gz
      - store_artifacts:
          path: runningdinner-backend/target/deploy.sh
      - persist_to_workspace:
          root: runningdinner-backend/target
          paths:
            - runningdinner.tar.gz
            - deploy.sh
            - extracted

  build_docker_image:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: runningdinner-backend/target
      # - setup_remote_docker:
      #     docker_layer_caching: false
      - run:
          name: Build Docker Image
          command: |
            cd runningdinner-backend
            ls -la target/extracted/application
            if [ $CIRCLE_BRANCH == "spring-boot-upgrade-afterpartylocation" ]; then
              docker build -f infrastructure/deployment/docker/Dockerfile -t clemensstich/runningdinner:latest -t clemensstich/runningdinner:$CIRCLE_BUILD_NUM .
            else
              docker build -f infrastructure/deployment/docker/Dockerfile -t clemensstich/runningdinner:$CIRCLE_BUILD_NUM .
            fi
      - run:
          name: Push to Dockerhub
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            docker push --all-tags clemensstich/runningdinner

  build_webclient:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "runningdinner-client/package.json" }}-{{ checksum "runningdinner-client/packages/webapp/package.json" }}
            - npm-deps-
      - run: cd runningdinner-client && yarn install
      - run: # TODO CI=false should be removed again!
          name: Build webclient
          command: |
            export REACT_APP_GOOGLE_MAPS_KEY_JS=$GOOGLE_MAPS_KEY_JS
            cd runningdinner-client
            CI=false yarn run build
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: dependencies-{{ checksum "runningdinner-client/package.json" }}-{{ checksum "runningdinner-client/packages/webapp/package.json" }}
      - run: 
          name: Move client artifacts to static folder
          command: |
            mkdir -p runningdinner-backend/src/main/resources/static
            mv -v runningdinner-client/packages/webapp/build/* runningdinner-backend/src/main/resources/static
            mv runningdinner-backend/src/main/client/resources/ runningdinner-backend/src/main/resources/static/resources
      - persist_to_workspace:
          root: runningdinner-client/packages/webapp
          paths:
            - build

  deploy_webclient_s3:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
      - checkout
      - attach_workspace:
          at: runningdinner-client/packages/webapp
      - run:
          name: Debug Directory layout
          command: >
            echo "printing Dir"
            ls -la
      - run:
          name: Execute aws s3 sync
          command: >
            CONTENT_BUILD_DIR="runningdinner-client/packages/webapp/build/"
            if [ ! -d "$CONTENT_BUILD_DIR" ] || [ ! "$(ls -A $CONTENT_BUILD_DIR)" ]; then
              echo "$CONTENT_BUILD_DIR does either not exist or has no files inside"
              exit 1
            fi
            aws s3 sync "$CONTENT_BUILD_DIR" s3://runningdinner-web-dev --delete --region eu-central-1

  # deploy_runningdinner_app:
  #   machine:
  #     image: ubuntu-2004:202201-02
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: runningdinner-client/packages/webapp
  #     - aws-ecs/deploy-service-update:
  #         cluster: "runningdinner-ecs-cluster"
  #         family: "runningdinner-backend"
  #         container-image-name-updates: 'container=runningdinner-backend,tag=${CIRCLE_BUILD_NUM}'
  #         aws-access-key-id: $DEV_AWS_ACCESS_KEY_ID
  #         aws-secret-access-key: $DEV_AWS_SECRET_ACCESS_KEY
  #         aws-region: "eu-central-1"
  #     - run:
  #         name: Deploy Webclient files to S3
  #         command: |
  #           aws s3 sync ./runningdinner-client/packages/webapp/build/ s3://runningdinner-web-dev --delete
  #     - run:
  #         name: Check App is healthy
  #         command: |
  #           curl -k -XGET https://dev.runyourdinner.eu/rest/masterdataservice/v1/registrationtypes

  deploy_runningdinner_functions:
    docker:
      - image: cimg/node:current
    environment:
      SERVERLESS_ACCESS_KEY: $PROD_SERVERLESS_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "runningdinner-functions/package.json" }}
            - npm-deps-
      - run:
          name: Install serverless framework and all needed dependencies
          command: |
            cd runningdinner-functions
            sudo npm install -g serverless
            npm install
      - run:
          name: Deploy runningdinner-functions lambda(s)
          command: |
            cd runningdinner-functions
            export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY
            export SERVERLESS_ACCESS_KEY=$PROD_SERVERLESS_ACCESS_KEY
            echo "Starting deploy..."
            serverless deploy --stage prod --verbose
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: dependencies-{{ checksum "runningdinner-functions/package.json" }}

workflows:
  build_test_deploy_app:
    jobs:
      - build_webclient:
          context: workspace
      - build_test_backend:
          context: workspace
      - build_docker_image:
          context: workspace
          requires:
            - build_test_backend
      - confirm-app-deployment:
          type: approval
          # filters:
          #   branches:
          #     only: main
      - aws-ecs/deploy-service-update:
          context: workspace
          requires:
            - build_docker_image
            - build_webclient
            - confirm-app-deployment
          cluster: "runningdinner-ecs-cluster"
          family: "runningdinner-backend"
          service-name: "runningdinner-service"
          container-image-name-updates: 'container=runningdinner-backend,tag=${CIRCLE_BUILD_NUM}'
          aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
      - deploy_webclient_s3:
          context: workspace
          requires:
            - build_webclient
            - confirm-app-deployment
            # - aws-ecs/deploy-service-update


      # - deploy_runningdinner_app:
      #     context: workspace
      #     requires:
      #       - build_docker_image
      #       - build_webclient
      #       - confirm-app-deployment
          # filters:
          #   branches:
          #     only: main

  deploy_functions:
    jobs:
      - confirm-functions-deployment:
          type: approval
          filters:
            branches:
              only: main
      - deploy_runningdinner_functions:
          context: workspace
          requires:
            - confirm-functions-deployment
          filters:
            branches:
              only: main
