runningdinner-database-name=runningdinner
runningdinner-schema-name=runningdinner

spring.aop.proxy-target-class=true

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximumPoolSize=15
spring.datasource.hikari.max-lifetime=165000
spring.datasource.hikari.idleTimeout=150000

spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.default_schema=${runningdinner-schema-name}
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.open-in-view=true

spring.flyway.enabled=true
spring.flyway.placeholders.runningdinner-user-name=${spring.datasource.username}
spring.flyway.placeholders.runningdinner-user-password=${spring.datasource.password}
spring.flyway.placeholders.runningdinner-database-name=${runningdinner-database-name}
spring.flyway.placeholders.runningdinner-schema-name=${runningdinner-schema-name}
spring.flyway.schemas=${runningdinner-schema-name}
spring.flyway.url=${spring.datasource.url}

management.endpoints.web.base-path=/
management.endpoint.health.enabled=true

# server.contextPath=/runningdinner
server.port=9090

# Settings that used for constructing various URLs:
host.context.url=
dinner.self.url=${host.context.url}/self/{selfAdministrationId}
dinner.public.url=${host.context.url}/running-dinner-events/{publicId}
dinner.public.registration.url=${dinner.public.url}/registration/
dinner.admin.url=${host.context.url}/admin/{adminId}
dinner.admin.participants.url=${dinner.admin.url}/participants
dinner.team.managehost.url=${dinner.self.url}/teamhost/{participantId}/{teamId}
dinner.team.route.url=${dinner.self.url}/dinnerroute/{participantId}/{teamId}
dinner.teampartnerwish.confirmation.url=${dinner.self.url}/teampartnerwish/{participantId}?email={email}

contact.mail=runyourdinner@gmail.com

mail.awsses.enabled=true
mail.awsses.username=
mail.awsses.password=
mail.awsses.from=runyourdinner@mailing.runyourdinner.eu
mail.awsses.limit.monthly=62000
mail.awsses.fallback=true
mail.awsses.priority=5

mail.mailjet.enabled=true
mail.mailjet.key.public=
mail.mailjet.key.private=
mail.mailjet.from=runyourdinner@message.runyourdinner.eu
mail.mailjet.limit.daily=200
mail.mailjet.limit.monthly=6000
mail.mailjet.priority=5

mail.sendgrid.api.enabled=true
mail.sendgrid.api.key=
mail.sendgrid.api.from=runyourdinner@mail.runyourdinner.eu
mail.sendgrid.api.limit.monthly=6000
sendgrid.sync.sent.mails=true

mail.webhook.token=

mail.smtp.enabled=false
mail.smtp.username=
mail.smtp.password=
mail.smtp.host=
mail.smtp.port=25
mail.smtp.auth=true
mail.smtp.starttls.enable=true
mail.html=true

multipart.maxFileSize=2048KB
multipart.maxRequestSize=2048KB

delete.runninginnder.instances.scheduler.enabled=true
deliver.feedback.mail.scheduler.enabled=true
# 15 minutes:
deliver.feedback.mail.scheduler.send.interval=900000

message.max-allowed-tasks-per-job=250
# 3 * 180 + 180:
message.max-allowed-tasks-per-dinner=1800

aws.sqs.geocode.request.url=
aws.sqs.geocode.response.url=
aws.http.geocode.request.url=

# TODO Change to production bucket
aws.s3.route.optimization.bucket=route-optimization-dev

spring.main.allow-circular-references=true

# Due to PayPal is currently not used, I don't want
paypal.baseurl=https://api-m.sandbox.paypal.com
paypal.clientid=Not
paypal.secret=Set

# 3 Minutes:
route.optimization.instance.timeout.seconds=180

spring.flyway.username=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
