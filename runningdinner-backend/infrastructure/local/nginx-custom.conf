server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

server {

    server_name  localhost;

	gzip on;
	gzip_static on;
	
	# brotli_static on;
	
	# Compression level (1-9).
	# 5 is a perfect compromise between size and CPU usage, offering about 75%
	# reduction for most ASCII files (almost identical to level 9).
	# Default: 1
	gzip_comp_level 5;
	
	# Don't compress anything that's already small and unlikely to shrink much if at
	# all (the default is 20 bytes, which is bad as that usually leads to larger
	# files after gzipping).
	# Default: 20
	gzip_min_length 256;
	
	# Compress data even for clients that are connecting to us via proxies,
	# identified by the "Via" header (required for CloudFront).
	# Default: off
	gzip_proxied any;
	
	# Tell proxies to cache both the gzipped and regular version of a resource
	# whenever the client's Accept-Encoding capabilities header varies;
	# Avoids the issue where a non-gzip capable client (which is extremely rare
	# today) would display gibberish if their proxy gave them the gzipped version.
	# Default: off
	gzip_vary on;
	
	# Compress all output labeled with one of the following MIME-types.
	# `text/html` is always compressed by gzip module.
	# Default: text/html
	gzip_types
	  application/atom+xml
	  application/geo+json
	  application/javascript
	  application/x-javascript
	  application/json
	  application/ld+json
	  application/manifest+json
	  application/rdf+xml
	  application/rss+xml
	  application/vnd.ms-fontobject
	  application/wasm
	  application/x-web-app-manifest+json
	  application/xhtml+xml
	  application/xml
	  font/eot
	  font/otf
	  font/ttf
	  image/bmp
	  image/svg+xml
	  image/vnd.microsoft.icon
	  image/x-icon
	  text/cache-manifest
	  text/calendar
	  text/css
	  text/javascript
	  text/markdown
	  text/plain
	  text/xml
	  text/vcard
	  text/vnd.rim.location.xloc
	  text/vtt
	  text/x-component
	  text/x-cross-domain-policy;
	

	server_tokens off;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    root   /usr/share/nginx/html/static;

	rewrite ^/running-dinner-event/(.*)$ https://localhost:3000/running-dinner-events/$1;
	
	# rewrite ^/self\.html?/$ https://localhost:3000/self/$1;
	# rewrite /self\.h.*/(.*) https://localhost:3000/self/$1 $break;

    location / {
        try_files $uri $uri/ /index.html;
        # index  index.html index.htm;
    }

    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;

    add_header Strict-Transport-Security "max-age=31536000" always;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 60m;

  location /rest/ {
    proxy_pass http://runningdinner-backend:9090/rest/;
    proxy_buffering    off;
    proxy_buffer_size  128k;
    proxy_buffers 100  128k;
    # proxy_http_version 1.1;
  }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # location = /404.html {
    #    root   /usr/share/nginx/html/static;
    # }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    # error_page   500 502 503 504  /50x.html;
    # location = /50x.html {
    #    root   /usr/share/nginx/html;
    # }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

